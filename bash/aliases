if [ -f /usr/local/git/contrib/completion/git-completion.bash ]; then
  . /usr/local/git/contrib/completion/git-completion.bash
fi
GIT_PS1_SHOWDIRTYSTATE=true

if [ -f /opt/local/etc/bash_completion ]; then
    . /opt/local/etc/bash_completion
fi

export EDITOR='vim'


alias node="env NODE_NO_READLINE=1 rlwrap node"

alias grep=egrep

alias nh='nautilus .'
alias fh='open .'
alias gtest='ping google.com'

alias ebashrc='vim ~/.bashrc'
alias sbashrc='source ~/.bashrc'

alias mkae='make'
alias mke='make'
alias cot='cat'
alias card='cat README*'
alias c='clear'
alias clera='clear'
alias clar='clear'
alias cddf='cd ~/bin/dotfiles/'
alias cdw='cd /var/www'
alias cdd='cd ~/Desktop'
alias cdh='cd --'
alias cd..='cd ..'
## a quick way to get out of current directory ##
# http://www.cynerciti.biz/tips/bash-aliases-mac-centos-linux-unix.html
#alias ..='cd ..'
#alias ...='cd ../../../'
#alias ....='cd ../../../../'
#alias .....='cd ../../../../'
#alias .4='cd ../../../../'
#alias .5='cd ../../../../..'
alias cdp='cd ~/projects'
alias disk_usage='df --total -hl'

# Simulate OSX's pbcopy and pbpaste on other platforms
if [ ! $(uname -s) = "Darwin" ]; then
    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
fi

if [ $(uname -s) = "Darwin" ]; then
    alias purge_downloads="sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'"
    alias vim='purge_downloads && reattach-to-user-namespace vim'
fi

# list only files
alias lf="ls -l | egrep -v '^d'"

# list only dirs
alias ldir="ls -l | egrep '^d'"

# count files in . (pass -r for recursive)
function countfs {
  if [ "$1" == '-r' ]; then
    find . -type f | wc -l
  else
    ls -1r | wc -l
  fi
}

# sum size of files in . -r (MB)
alias cdsize='du -ch | grep total'
alias lsmb='ls -lh'

function fn {
  find . -name $1
}

function fif {
    grep -lir "$*" *
}

function fifp {
    grep -RnisI "$*" *
}

function fifvo {
  vim -O $(fif $*)
}

function fifvw {
  vim -p $(fif $*)
}

function fifpa {
    grep -RnisI -A 3 -B 3 "$*" *
}

# https://stackoverflow.com/questions/16292750/use-output-of-two-greps-with-diff
function fifd {
    diff <(fifp $1) <(fifp $2)
}

function count_lines {
    find *"$*" -print0 | xargs -0 wc -l
}

parse_git_branch() {
    git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||'
}

parse_git_branch_fancy() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[git:\1]/'
}

alias cdr='cd ./$(git rev-parse --show-cdup)'

function gaa {
    git add .
}

function ga {
    git add "$*"
}

function gcommit {
    git commit -m "$*"
}

function gaac {
    gaa && gcommit "$*"
}

function gap {
  if [ $# == 0 ]; then
      git add -p
  else
      git add -p $1
  fi
}

function gamend {
    git commit -m "$*" --amend
}

function gco {
    git checkout "$*"
}

function gri {
    git rebase -i HEAD~$1
}

function gdbl {
    git branch -D $1
}

function gploc {
    git pull --rebase origin $(gcb)
}

function gdbr {
    git push origin :$1
}

function gpsoc {
    git push origin $(parse_git_branch)
}

function gurm {
    git add README.md && gcommit "update README.md" && gpsoc
}

function gpshc {
    git push heroku $(parse_git_branch)
}

function gpuc {
    git push upstream $(parse_git_branch)
}

function gsa {
    git stash apply stash@{$1}
}

function grs {
    git reset --soft $1
}

function grh {
    git reset --hard $1
}

function gl {
    git log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset'
}

function gfu {
    git fetch upstream
}

# list lines +/- in unstaged changes
function glpm {
    git diff --stat HEAD
}

function gaacb {
    gaac $(gcb) - "$*"
}

function ts {
    termup start $1
}

function be {
    bundle exec "$*"
}

alias which_linux='uname -a'
alias which_debian='cat /etc/issue && cat /etc/debian_version'
alias which_ubuntu='lsb_release -a'
alias which_distro='cat /etc/*release'
alias kaf='killall firefox'
alias v='vim'
alias vi='vim'
alias im='vim'
alias vm='vim'
alias vem='vim'
alias vmi='vim'
alias vwi='vim'
alias vimnone='vim -u NONE'
alias vimmake='vim -u NONE Makefile'
alias vundle_install='vim +BundleInstall +qall'
alias vundle_update='vim +BundleUpdate +qall'
alias vundle_clean='vim +BundleClean +qall'
alias gcb="git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||'"
alias gcbcb="gcb | xargs | pbcopy"
alias gs='git status'
alias gpom='git push origin master'
alias gcom='git checkout master'
alias gb='git branch'
alias gr='git remote'
alias gbr='git branch -r'
alias gsl='git stash list'
alias gss='git stash -u'
alias gdcs='git checkout -- .'
alias gh="git rev-parse HEAD"
alias gd='git diff'
alias gds='git diff --stat'
alias glcf='git diff --name-only --diff-filter=U'
alias bbrew='bundle exec rake barista:brew'
alias deployms='bundle exec rake deploy:staging[+]'
alias deploymb='bundle exec rake deploy:beta[+]'
alias deploymp='bundle exec rake deploy:production[+]'
alias deploymd='bundle exec rake deploy:developer[+]'
alias jasb='bundle exec rake jasmine'
alias jasc='bundle exec rake jasmine:ci'

# run rspec suite or spec
function rs {
  if [ $# == 0 ]; then
    bundle exec rspec spec
  else
    bundle exec rspec $1
  fi
}

function bec {
  if [ $# == 0 ]; then
    bundle exec cucumber
  else
    bundle exec cucumber $1
  fi
}

alias rdm='echo "rake db:migrate" && bundle exec rake db:migrate'
alias rdp='echo "rake db:test:prepare" && bundle exec rake db:test:prepare'
alias rdmp='rdm && rdp'
alias rdpop='echo "rake db:populate" && bundle exec rake db:populate'
alias bi='bundle install'
alias bu='bundle update'
alias gemfile="touch Gemfile && echo \"source 'https://rubygems.org'\" >> Gemfile"
alias pbc='pbcopy'
alias scd='python -m SimpleHTTPServer'
alias irbs='irb --simple-prompt'
alias rc='pry'
alias berc='be rails c'
alias bers='be rails s'
alias berr='be rake routes'
alias berdd='be rake db:drop'
alias berds='be rake db:setup'
alias bert='be rake test'
alias ber='be rake'
alias fs='foreman start'

function gcbpbc {
  gcb | pbcopy
}

alias start_postgres='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias stop_postgres='pg_ctl -D /usr/local/var/postgres stop -s -m fast'

function kts {
  tmux kill-session -t $*
}

function kcts {
  session_name=$(tmux display-message -p '#S')
  kts $session_name
}

# heroku
function hrc {
    heroku run console --app $*
}

function hc {
    heroku config --app $*
}

function hr {
    heroku restart --app $*
}

function hlt {
    heroku logs --tail --app $*
}

function berap {
  RAILS_ENV=production bundle exec rake assets:precompile
}

alias t=tree
alias tl1='tree -L 1'
alias tl2='tree -L 2'
alias tl3='tree -L 3'

alias tmux="TERM=screen-256color-bce tmux"
alias tl="tmuxinator local"
alias tmx="tmux"

alias update-and-upgrade="sudo apt update && sudo apt dist-upgrade && sudo apt autoremove && sudo apt autoclean"
alias run-security-sweep="cd && sudo chkrootkit"

# Docker Compose
alias dcb='docker-compose build'
alias dcbup='docker-compose build && docker-compose up'
alias dcd='docker-compose down'
alias dcs='docker-compose stop'
alias dcup='docker-compose up'
alias dcrrc='docker-compose run --rm app bundle exec rails console'
alias dcrr='docker-compose run --rm app bundle exec rake'
alias dcrrm='docker-compose run --rm app bundle exec rake db:migrate'
alias dcrrs='docker-compose run --rm app bundle exec rake db:setup'
alias dclr='docker-compose run --rm app lein repl'

# Docker
alias drm='docker rm'
alias delete_docker_images='docker rmi -f $(docker images -q)'
alias delete_docker_containers='docker rm -f $(docker ps -a -q)'
alias delete_docker_volumes='docker volume rm $(docker volume ls -q)'

# Date
alias udate='date +%s'

# free space in boot partition
# https://askubuntu.com/questions/89710/how-do-i-free-up-more-space-in-boot
function free-boot-space {
  sudo apt-get purge $(dpkg -l linux-{image,headers}-"[0-9]*" | awk '/ii/{print $2}' | grep -ve "$(uname -r | sed -r 's/-[a-z]+//')")
}

function mkdcd {
    mkdir $1 && cd $1
}

# parse issue number out of git branch name and prepend it to git commit message
#function gaacwbp {
#  prefix=$( expr match "$(gcb)" '\(^\d+\)' )
#  if [$prefix -eq ""]; then
#    gaa && gcommit "$*"
#  else
#    gaa && gcommit "\#$prefix - $*"
#  fi
#}

# Eternal bash history.
# Lifted from: https://github.com/fotinakis/bashrc/blob/master/init.sh
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
shopt -s histappend
stophistory () {
  PROMPT_COMMAND="bash_prompt_command"
  echo 'History recording stopped.'
}

# watch for changes to c source file, build and run
function watch-build-run {
  local -r watcher=filewatcher
  if type $watcher >/dev/null 2>&1; then
    ${watcher} "$1.c" "gcc $1.c -o $1 && ./$1"
  else
    echo >&2 "'$watcher' is not installed. Aborting.";
  fi
}

function get-local-ip {
  ip addr show scope global | grep inet | cut -d' ' -f6 | cut -d/ -f1
}

function ts {
  args=$@
  tmux send-keys -t right "$args" C-m
}

function iown {
  sudo chown -R $(whoami) ./*
}
